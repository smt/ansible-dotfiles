# file: roles/dotfiles/tasks/smt.yml

---
# files ------------------------------------------------------------------- {{{
- name: smt | mkdir -p dotfiles.smt.directories
  file: name={{ item }} state=directory
  with_items: dotfiles.smt.directories
# /files ------------------------------------------------------------------ }}}

# repos ------------------------------------------------------------------- {{{
- name: smt | git clone dotfiles.smt.git.repos
  git: repo={{ item.repo }} dest={{ item.dest }} accept_hostkey=true ssh_opts="-o StrictHostKeyChecking=no"
  with_items: dotfiles.smt.git.repos
# /repos ------------------------------------------------------------------ }}}

# fzf --------------------------------------------------------------------- {{{
- name: smt | fzf install
  shell: "{{ dotfiles.smt.fzf.commands.install }}"
  args:
    chdir: "{{ dotfiles.smt.fzf.directories.root }}"
# /fzf -------------------------------------------------------------------- }}}

# rbenv ------------------------------------------------------------------- {{{
- name: smt | rbenv install dotfiles.smt.ruby.version
  shell: "./{{ dotfiles.smt.rbenv.commands.rbenv_install_ruby }}"
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  args:
    chdir: "{{ dotfiles.smt.rbenv.directories.bin }}"
    creates: "{{ dotfiles.smt.rbenv.directories }}/{{ smt.ruby.version }}"

- name: smt | rbenv global dotfiles.smt.ruby.version
  shell: "./{{ dotfiles.smt.rbenv.commands.rbenv_global_ruby }}"
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  args:
    chdir: "{{ dotfiles.smt.rbenv.directories.bin }}"

- name: smt | gem install bundler
  shell: "./{{ dotfiles.smt.rbenv.commands.gem_install_bundler }}"
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  args:
    chdir: "{{ dotfiles.smt.rbenv.directories.shims }}"
  ignore_errors: True
# /rbenv ------------------------------------------------------------------ }}}

# dotfiles ---------------------------------------------------------------- {{{
- name: smt | rake stat
  stat: "path={{ dotfiles.smt.rbenv.directories.shims }}/{{ dotfiles.smt.dotfiles.commands.install }}"
  register: rake
- name: smt | rake install dotfiles
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  shell: "{{ dotfiles.smt.rbenv.directories.shims }}/{{ dotfiles.smt.dotfiles.commands.install }}"
  args:
    chdir: "{{ dotfiles.smt.dotfiles.directories.root }}"
    creates: "{{ smt.home }}/.fishrc.local"
  when: rake.stat.isreg is defined and rake.stat.isreg

- name: smt | tmux.conf stat
  stat: "path={{ smt.home }}/.tmux.{{ system }}.conf"
  register: tmux_conf
- name: smt | ln -s ~/.tmux.system.conf ~/.tmux.conf
  file: "src={{ smt.home }}/.tmux.{{ system }}.conf dest={{ smt.home }}/.tmux.conf state=link"
  when: tmux_conf.stat.islnk is not defined

- name: smt | chsh -s fish
  shell: "dscl . change /users/{{ smt.user.name }} UserShell /bin/bash {{ smt.user.shell }}"
  sudo: True
  args:
    executable: "/bin/bash"
  ignore_errors: True
# /dotfiles --------------------------------------------------------------- }}}

# nvm --------------------------------------------------------------------- {{{
- name: smt | nvm add nvm source line to .profile
  file: "path={{ smt.home }}/.profile state=touch mode='u=rw,g=r,o=r'"
- lineinfile: "dest={{ smt.home }}/.profile line='source {{ smt.home }}/.nvm/nvm.sh'"

- name: smt | nvm self-install
  command: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.selfinstall }}"
  with_items: dotfiles.smt.nvm.versions
  register: nvm_selfinstall_result
  ignore_errors: True

- name: smt | nvm install nodes
  command: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.install }} {{ item }}"
  with_items: dotfiles.smt.nvm.versions
  register: nvm_install_result
  changed_when: "'is already installed.' not in nvm_install_result.stdout"
  when: nvm_selfinstall_result|success
  ignore_errors: True

- name: smt | nvm check default alias
  shell: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.checkdefault }}"
  register: nvm_check_default
  changed_when: False
  when: nvm_install_result|success
  ignore_errors: True

- name: smt | nvm set default node version to stable
  command: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.use }}"
  when: nvm_check_default|failed
# /nvm -------------------------------------------------------------------- }}}

# npm --------------------------------------------------------------------- {{{
- name: smt | npm install
  shell: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.npm.commands.install }} {{ item }}"
  with_items: dotfiles.smt.npm.modules
# /npm -------------------------------------------------------------------- }}}

# vim --------------------------------------------------------------------- {{{
- name: smt | get_url plug.vim
  get_url: "url={{ dotfiles.smt.vim.plug.url }} dest={{ dotfiles.smt.vim.plug.dest }}"

- name: smt | vim +PlugInstall +qall
  shell: "{{ dotfiles.smt.vim.plug.commands.install }}"
  args:
    chdir: "{{ smt.home }}"
    creates: "{{ dotfiles.smt.vim.plug.files.plugged }}"
# /vim -------------------------------------------------------------------- }}}
