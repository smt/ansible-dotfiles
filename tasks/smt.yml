# file: roles/dotfiles/tasks/smt.yml

---
# files ------------------------------------------------------------------- {{{
- name: smt | mkdir -p dotfiles.smt.directories
  file: name={{ item }} state=directory
  with_items: dotfiles.smt.directories
# /files ------------------------------------------------------------------ }}}

# repos ------------------------------------------------------------------- {{{
- name: smt | git clone dotfiles.smt.git.repos
  git: repo={{ item.repo }} dest={{ item.dest }} accept_hostkey=true ssh_opts="-o StrictHostKeyChecking=no"
  with_items: dotfiles.smt.git.repos
# /repos ------------------------------------------------------------------ }}}

# fzf --------------------------------------------------------------------- {{{
- name: smt | fzf install
  shell: "{{ dotfiles.smt.fzf.commands.install }}"
  args:
    chdir: "{{ dotfiles.smt.fzf.directories.root }}"
# /fzf -------------------------------------------------------------------- }}}

# rbenv ------------------------------------------------------------------- {{{
- name: smt | rbenv install
  shell: "./{{ dotfiles.smt.rbenv.commands.rbenv_install_ruby }} {{ item }}"
  with_items: dotfiles.smt.rbenv.versions
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  args:
    chdir: "{{ dotfiles.smt.rbenv.directories.bin }}"
    chdir: dotfiles.smt.rbenv.directories.bin
    creates: "{{ dotfiles.smt.rbenv.directories }}/{{ item }}"
  ignore_errors: True

- name: smt | rbenv global dotfiles.smt.ruby.version
  shell: "./{{ dotfiles.smt.rbenv.commands.rbenv_global_ruby }}"
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  args:
    chdir: "{{ dotfiles.smt.rbenv.directories.bin }}"

- name: smt | gem install
  shell: "./gem install {{ item }}"
  with_items: dotfiles.smt.rbenv.gems
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  args:
    chdir: "{{ dotfiles.smt.rbenv.directories.shims }}"
  ignore_errors: True
# /rbenv ------------------------------------------------------------------ }}}

# dotfiles ---------------------------------------------------------------- {{{
- name: smt | rake stat
  stat: "path={{ dotfiles.smt.rbenv.directories.shims }}/{{ dotfiles.smt.dotfiles.commands.install }}"
  register: rake
- name: smt | rake install dotfiles
  environment:
    RBENV_ROOT: "{{ dotfiles.smt.rbenv.directories.root }}"
  shell: "{{ dotfiles.smt.rbenv.directories.shims }}/{{ dotfiles.smt.dotfiles.commands.install }}"
  args:
    chdir: "{{ dotfiles.smt.dotfiles.directories.root }}"
    creates: "{{ smt.home }}/.fishrc.local"
  when: rake.stat.isreg is defined and rake.stat.isreg

- name: smt | tmux.conf stat
  stat: "path={{ smt.home }}/.tmux.{{ system }}.conf"
  register: tmux_conf
- name: smt | ln -s ~/.tmux.system.conf ~/.tmux.conf
  file: "src={{ smt.home }}/.tmux.{{ system }}.conf dest={{ smt.home }}/.tmux.conf state=link"
  when: tmux_conf.stat.islnk is not defined

- name: smt | chsh -s fish
  shell: "sudo dscl . change /users/{{ smt.user.name }} UserShell /bin/bash {{ smt.user.shell }}"
  args:
    executable: "/bin/bash"
  ignore_errors: True
# /dotfiles --------------------------------------------------------------- }}}

# nvm --------------------------------------------------------------------- {{{
- command: "brew --prefix nvm"
  register: nvm_prefix
- name: smt | nvm link to brew prefx
  file: "src={{ nvm_prefix }} dest={{ smt.home }}/.nvm state=link"
  changed_when: False

- name: smt | nvm add nvm source line to .profile
  file: "path={{ smt.home }}/.profile state=touch mode='u=rw,g=r,o=r'"
- lineinfile: "dest={{ smt.home }}/.profile line='source {{ smt.home }}/.nvm/nvm.sh'"

- name: smt | nvm install nodes
  command: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.install }} {{ item }}"
  with_items: dotfiles.smt.nvm.versions
  register: nvm_install_result
  changed_when: "'is already installed.' not in nvm_install_result.stdout"
  ignore_errors: True

- name: smt | nvm check default alias
  shell: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.checkdefault }}"
  register: nvm_check_default
  changed_when: False
  when: nvm_install_result|success
  ignore_errors: True

- name: smt | nvm set default node version to stable
  command: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.alias }}"
  when: nvm_check_default|failed

- name: smt | nvm use stable node
  command: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.nvm.commands.use }}"
# /nvm -------------------------------------------------------------------- }}}

# npm --------------------------------------------------------------------- {{{
- name: smt | npm install
  shell: "sudo -iu {{ smt.user.name }} {{ dotfiles.smt.npm.commands.install }} {{ item }}"
  with_items: dotfiles.smt.npm.modules
# /npm -------------------------------------------------------------------- }}}

# vim --------------------------------------------------------------------- {{{
- name: smt | get_url plug.vim
  get_url: "url={{ dotfiles.smt.vim.plug.url }} dest={{ dotfiles.smt.vim.plug.dest }}"

- name: smt | vim +PlugInstall +qall
  shell: "{{ dotfiles.smt.vim.plug.commands.install }}"
  args:
    chdir: "{{ smt.home }}"
    creates: "{{ dotfiles.smt.vim.plug.files.plugged }}"

- name: smt | link vim snippets
  file: "src={{ dotfiles.smt.vim.directories.snippets }} dest={{ smt.home}}/.vim/snippets state=link"
# /vim -------------------------------------------------------------------- }}}

# boot2docker ------------------------------------------------------------- {{{
- name: smt | boot2docker init
  command: "boot2docker init -m 8192"
  register: boot2docker_init
  args:
    creates: "{{ smt.home }}/.boot2docker"

- name: smt | mount /Users to boot2docker-vm
  command: "VBoxManage sharedfolder add boot2docker-vm -name home -hostpath /Users"
  when: boot2docker_init is defined

- name: smt | set SSD mode on boot2docker
  command: "VBoxManage storageattach boot2docker-vm --storagectl SATA --port 1 --device 0 --nonrotational on"
  when: boot2docker_init is defined

- name: smt | increase boot2docker memory to 8G
  command: "VBoxManage modifyvm 'boot2docker-vm' --memory 8192"
  when: boot2docker_init is defined

- name: smt | enable symlinks on shared folder /Users
  command: "VBoxManage setextradata boot2docker-vm VBoxInternal2/SharedFoldersEnableSymlinksCreate/home 1"
  when: boot2docker_init is defined

- name: smt | reload virtualbox kernel extensions
  command: "sudo /Library/Application\ Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh restart"
  when: boot2docker_init is defined
  ignore_errors: True

- name: smt | boot2docker up
  command: "boot2docker up"
  when: boot2docker_init is defined
  ignore_errors: True
# /boot2docker ------------------------------------------------------------ }}}

# perl -------------------------------------------------------------------- {{{
- name: smt | perl prefix
  command: "brew --prefix perl"
  register: perl_prefix
  changed_when: False

- name: smt | cpan install
  shell: "{{ perl_prefix.stdout }}/bin/cpan install {{ item }}"
  with_items:
    - CPAN
    - POSIX.pm
    - Finance/Quote.pm
    - Finance/QuoteHist.pm
  args:
    executable: "/bin/bash"

- name: smt | cpan reload
  shell: "{{ perl_prefix.stdout }}/bin/cpan reload"
  args:
    executable: "/bin/bash"
# /perl ------------------------------------------------------------------- }}}
